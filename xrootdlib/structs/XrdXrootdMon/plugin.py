import json
import enum
from typing import Union

from ...utility import slot_repr


class pluginType(bytes, enum.Enum):
    """
    Assumes binary header.
    """
    # Cache Context Manager 
    isCCM = b'M'

    # Proxy File Cache 
    isPFC = b'C'

    # TCP Connection Monitor 
    isTCM = b'T'


class PluginHdr(object):
    """
    Here tBeg, tEnd, sID should go
    """
    def __init__(self) -> None:
        raise NotImplementedError


class ProxyCache(object):
    """
    Information generated by the Proxy Cache Plug-in
    """
    __slots__ = ('event', 'lfn', 'size', 'blk_size', 'n_blks', 'n_blks_done', 
                'access_cnt', 'attach_t', 'detach_t', 'remotes', 'b_hit', 'b_miss', 'b_bypass')

    def __init__(
            self, event, lfn, size, blk_size, n_blks, n_blks_done, 
            access_cnt, attach_t, detach_t, remotes, b_hit, b_miss, b_bypass
        ):

        self.event, self.lfn, self.size, self.blk_size, self.n_blks,  = event, lfn, size, blk_size, n_blks
        self.n_blks_done, self.access_cnt, self.attach_t,  = n_blks_done, access_cnt, attach_t
        self.detach_t, self.remotes, self.b_hit, self.b_miss, self.b_bypass = detach_t, remotes, b_hit, b_miss, b_bypass

    @classmethod
    def from_string(cls, string: str):
        data = json.loads(string)
        return cls(**data)

    __repr__ = slot_repr


class ContextCache(object):
    """
    Information generated by the Context Manager Cache Plug-in
    """
    def __init__(self) -> None:
        raise NotImplementedError


class TCPConnectionMonitor(object):
    """
    Information generated by the TCP Connection MOnitor Plug-in
    """
    def __init__(self) -> None:
        raise NotImplementedError


#: Type of records in the f stream
PluginRecord = Union[ProxyCache, ContextCache, TCPConnectionMonitor]
