import struct
import enum
from typing import Union

from ...utility import slot_repr
from .constants import XROOTD_MON_SIDMASK


class XROOTD_MON(int, enum.Enum):
    """``XROOTD_MON_XYZ`` constants for the r-stream"""
    # information types
    #: Window timing mark
    REDTIME = 0x00
    #: Redirect event generated by cmsd
    REDIRECT = 0x80
    #: Redirect event generated by xrootd
    REDLOCAL = 0x90
    #: Server identification
    REDSID = 0xf0
    # REDLOCAL/REDIRECT operations
    #: Change file mode
    CHMOD = 0x01
    #: Locate file or directory
    LOCATE = 0x02
    #: Open director for reading
    OPENDIR = 0x03
    #: Open file for creation
    OPENC = 0x04
    #: Open file for reading
    OPENR = 0x05
    #: Open file for writing
    OPENW = 0x06
    #: Create a directory or path
    MKDIR = 0x07
    #: Rename a file or directory
    MV = 0x08
    #: Prepare request
    PREP = 0x09
    #: Query information request
    QUERY = 0x0a
    #: Remove a file
    RM = 0x0b
    #: Remove a directory
    RMDIR = 0x0c
    #: Stat a file or directory
    STAT = 0x0d
    #: Truncate a file
    TRUNC = 0x0e


class Redirect(object):
    """
    ``XrdXrootdMonRedir`` representing a redirect record

    :param type: the type of the record, i.e. ``REDIRECT`` or ```REDLOCAL``
    :param subtype: the requested operation, i.e. ``CHMOD``, ``LOCALTE``, ...
    :param dent: size of the struct in bytes plus one
    :param port: port to which the client was redirected
    :param dictid: client identifier (see :py:class:`~xrootdlib.structs.XrdXrootdMon.Map`)
    :param server: hostname or address of the target server
    :param path: path of the file on the target server
    """
    __slots__ = ('type', 'subtype', 'dent', 'port', 'dictid', 'server', 'path')
    struct_parser = struct.Struct('!B B h L')

    @property
    def size(self) -> int:
        return (self.dent - 1) * 8 + self.struct_parser.size

    @property
    def local(self) -> bool:
        """Whether the redirection target is the same server"""
        return not self.server

    @property
    def arg0(self):
        return RedirectArg0View(self)

    @property
    def arg1(self):
        return RedirectArg1View(self)

    def __init__(
            self, type: XROOTD_MON, subtype: XROOTD_MON, dent: int, port: int, dictid: int, server: bytes, path: bytes):
        self.type, self.subtype, self.dent, self.port, self.dictid, self.server, self.path = \
            type, subtype, dent, port, dictid, server, path

    @classmethod
    def from_buffer(cls, buffer: bytes):
        sumtype, dent, port, dictid = cls.struct_parser.unpack_from(buffer)  # type: int, int, int, int
        address = bytes(buffer[cls.struct_parser.size:(dent - 1) * 8 + cls.struct_parser.size])
        server, _, path = address.rpartition(b':')
        type, subtype = XROOTD_MON(sumtype & 0xf0), XROOTD_MON(sumtype & 0x0f)
        return cls(type, subtype, dent, port, dictid, server, path)

    __repr__ = slot_repr


class RedirectArg0View(object):
    __slots__ = ('_redirect',)

    @property
    def type(self):
        return self._redirect.type | self._redirect.subtype

    @property
    def dent(self):
        return self._redirect.dent

    @property
    def port(self):
        return self._redirect.port

    def __init__(self, redirect: Redirect):
        self._redirect = redirect


class RedirectArg1View(object):
    __slots__ = ('_redirect',)

    @property
    def dictid(self):
        return self._redirect.dictid

    @property
    def serverpath(self):
        server = self.server or ''
        return '%s:%s' % (server, self._redirect.path)

    @property
    def server(self):
        return self._redirect.server

    @property
    def path(self):
        return self._redirect.path

    def __init__(self, redirect: Redirect):
        self._redirect = redirect


class ServerIdent(object):
    """
    ``XrdXrootdMonRedir`` representing a server identification record

    :param sid: server identifier (see :py:class:`~xrootdlib.structs.XrdXrootdMon.Map`)
    """
    __slots__ = ('sid',)
    struct_parser = struct.Struct('!q')
    size = struct_parser.size
    type = XROOTD_MON.REDSID

    def __init__(self, sid: int):
        self.sid = sid

    @classmethod
    def from_buffer(cls, buffer: bytes):
        sid = cls.struct_parser.unpack_from(buffer)[0] & XROOTD_MON_SIDMASK
        return cls(sid)

    __repr__ = slot_repr


class WindowMark(object):
    """
    ``XrdXrootdMonRedir`` representing a window timing mark

    :param timestamp: timestamp when the *current* window started
    :param prev_duration: duration of the *previous* window

    Note that windows are usually not adjacent: the :py:class:`WindowMark`
    signifies the beginning of a *new* window.
    The previous window may have been closed an arbitrary time before.

    To get the time range covered by a window, the ``prev_duration``
    of the next window is required:

    .. code:: python

        # window => tuple(start, end)
        window_range[i] = (
            window_marks[i].timestamp,
            window_marks[i].timestamp + window_marks[i+1].prev_duration
        )
    """
    __slots__ = ('timestamp', 'prev_duration')
    struct_parser = struct.Struct('!l l')
    size = struct_parser.size
    type = XROOTD_MON.REDTIME

    @property
    def arg0(self):
        return WindowMarkArg0View(self)

    @property
    def arg1(self):
        return WindowMarkArg1View(self)

    def __init__(self, timestamp: int, prev_duration: int):
        self.timestamp, self.prev_duration = timestamp, prev_duration

    @classmethod
    def from_buffer(cls, buffer: bytes):
        duration, timestamp = cls.struct_parser.unpack_from(buffer)  # type: int, int
        return cls(timestamp, duration & 0b111111111111111111111111)

    __repr__ = slot_repr


class WindowMarkArg0View(object):
    __slots__ = ('_window',)

    @property
    def type(self):
        return XROOTD_MON.REDTIME

    @property
    def window(self):
        return self._window.prev_duration

    def __init__(self, window: WindowMark):
        self._window = window


class WindowMarkArg1View(object):
    __slots__ = ('_window',)

    @property
    def window(self):
        return self._window.timestamp

    def __init__(self, window: WindowMark):
        self._window = window


#: Type of records in the r stream
Redir = Union[Redirect, ServerIdent, WindowMark]
